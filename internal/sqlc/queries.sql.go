// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (handle, hashed_password, clan, magic, enabled)
VALUES (?1, ?2, ?3, ?4, ?5)
RETURNING id
`

type CreateUserParams struct {
	Handle         string
	HashedPassword string
	Clan           string
	Magic          string
	Enabled        string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Handle,
		arg.HashedPassword,
		arg.Clan,
		arg.Magic,
		arg.Enabled,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET enabled = 'N'
WHERE id = ?1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const fetchSchemaMetadata = `-- name: FetchSchemaMetadata :many
SELECT version, assets_path, templates_path
FROM metadata
`

func (q *Queries) FetchSchemaMetadata(ctx context.Context) ([]Metadatum, error) {
	rows, err := q.db.QueryContext(ctx, fetchSchemaMetadata)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metadatum
	for rows.Next() {
		var i Metadatum
		if err := rows.Scan(&i.Version, &i.AssetsPath, &i.TemplatesPath); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchUser = `-- name: FetchUser :one
SELECT id, hashed_password, clan, magic, enabled
FROM users
WHERE handle = ?1
`

type FetchUserRow struct {
	ID             int64
	HashedPassword string
	Clan           string
	Magic          string
	Enabled        string
}

func (q *Queries) FetchUser(ctx context.Context, handle string) (FetchUserRow, error) {
	row := q.db.QueryRowContext(ctx, fetchUser, handle)
	var i FetchUserRow
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.Clan,
		&i.Magic,
		&i.Enabled,
	)
	return i, err
}

const updateOttoMagic = `-- name: UpdateOttoMagic :exec
UPDATE users
SET magic = ?1
WHERE id = 1
  AND handle = 'otto'
  AND clan = '0000'
`

func (q *Queries) UpdateOttoMagic(ctx context.Context, magic string) error {
	_, err := q.db.ExecContext(ctx, updateOttoMagic, magic)
	return err
}

const updateOttoPassword = `-- name: UpdateOttoPassword :exec
UPDATE users
SET hashed_password = ?1
WHERE id = 1
  AND handle = 'otto'
  AND clan = '0000'
`

func (q *Queries) UpdateOttoPassword(ctx context.Context, hashedPassword string) error {
	_, err := q.db.ExecContext(ctx, updateOttoPassword, hashedPassword)
	return err
}

const updateUserMagic = `-- name: UpdateUserMagic :exec
UPDATE users
SET magic = ?2
WHERE id = ?1
  AND id != 1
`

type UpdateUserMagicParams struct {
	ID    int64
	Magic string
}

func (q *Queries) UpdateUserMagic(ctx context.Context, arg UpdateUserMagicParams) error {
	_, err := q.db.ExecContext(ctx, updateUserMagic, arg.ID, arg.Magic)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET hashed_password = ?2
WHERE id = ?1
  AND id != 1
`

type UpdateUserPasswordParams struct {
	ID             int64
	HashedPassword string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.ID, arg.HashedPassword)
	return err
}
